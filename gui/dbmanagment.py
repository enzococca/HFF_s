#!/usr/bin/python# -*- coding: utf-8 -*-"""/***************************************************************************        HFF_system Plugin  - A QGIS plugin to manage archaeological dataset                             -------------------        begin                : 2007-12-01        copyright            : (C) 2008 by Luca Mandolesi        email                : mandoluca at gmail.com ***************************************************************************//*************************************************************************** *                                                                         * *   This program is free software; you can redistribute it and/or modify  * *   it under the terms of the GNU General Public License as published by  * *   the Free Software Foundation; either version 2 of the License, or     * *   (at your option) any later version.                                   * *                                                                         * ***************************************************************************/"""from __future__ import absolute_importimport osimport subprocessimport sysimport timeimport shutilfrom builtins import rangefrom builtins import strfrom ..modules.utility.hff_system__OS_utility import Hff_OS_Utilityfrom ..modules.utility.settings import Settingsfrom ..modules.db.hff_system__conn_strings import Connectionfrom qgis.PyQt import QtCorefrom qgis.PyQt.QtCore import QRectF, pyqtSignal, QObject, pyqtSlot, Qtfrom qgis.PyQt.QtWidgets import QApplication, QDialog, QMessageBox,  QProgressDialog, QProgressBar,QWidget,QLabel,QVBoxLayout, QFileDialogfrom qgis.PyQt.uic import loadUiTypeMAIN_DIALOG_CLASS, _ = loadUiType(os.path.join(os.path.dirname(__file__), 'ui', 'dbmanagment.ui'))class hff_system__dbmanagment(QDialog, MAIN_DIALOG_CLASS):    MSG_BOX_TITLE = 'HFF- hff_system__version 0.4 - Scheda gestione DB'    def __init__(self, iface):        super().__init__()        self.iface = iface        self.setupUi(self)        QMessageBox.warning(self, 'Alert',                            'System under develop'                            , QMessageBox.Ok)        # self.customize_GUI() #call for GUI customizations        self.currentLayerId = None    def enable_button(self, n):        self.backup.setEnabled(n)    def enable_button_search(self, n):        self.backup.setEnabled(n)    def on_backupsqlite_pressed(self):        conn = Connection()        conn_str = conn.conn_str()        a = conn_str.lstrip('sqlite:///')        home = os.environ['HFF_HOME']        # conn_import = '%s%s%s' % (home, os.sep,                                  # 'HFF_DB_folder/hff_system__db.sqlite'                                  # )        conn_export = '%s%s%s' % (home, os.sep,                                  'hff_system__db_backup/hff_survey_'                                  + time.strftime('%Y%m%d_%H_%M_%S_')                                  + '.sqlite')        b=shutil.copy(a,conn_export)        i = 0        for c in b:            if i==0:                self.progress = self.progressBar_db#("Please Wait!", "Cancel", 0, 100, MainWindow)                self.progress.setWindowModality(Qt.WindowModal)                self.progress.setWindowTitle("Loading, Please Wait! (Cloudflare Protection)")                self.progress.setMinimum(0)                self.progress.setMaximum(100)                self.progress.resize(1000,100)                self.progress.show()                self.progress.setValue(0)                self.progress.setValue(100)                 self.setLayout(QVBoxLayout())                self.layout().addWidget(self.progress)            else:                self.image = QLabel('Backup Falied')                self.image.setAlignment(Qt.AlignCenter)                self.layout().addWidget(self.image)    def on_backup_pressed(self):        home = os.environ['HFF_HOME']        PDF_path = '%s%s%s' % (home, os.sep, 'HFF_db_backup')        cfg_rel_path = os.path.join(os.sep, 'HFF_DB_folder', 'config.cfg')        file_path = '{}{}'.format(home, cfg_rel_path)        conf = open(file_path, "r")        data = conf.read()        settings = Settings(data)        settings.set_configuration()        conf.close()            dump_dir = PDF_path        db_username = settings.USER        host = settings.HOST        port = settings.PORT        database_password=settings.PASSWORD        db_names = settings.DATABASE        file_path = ''        dumper = ' -U %s -Z 9 -f %s -F c -d %s  '        bkp_file = '%s_%s.backup' % (db_names,                                  time.strftime('%Y%m%d_%H_%M'))        file_path = os.path.join(dump_dir, bkp_file)        command = 'pg_dump' + dumper % (db_username, file_path,                                        db_names)        subprocess.call(command, shell=False)        # return p.communicate('{}\n'.format(database_password))        #subprocess.call('gzip ' + file_path, shell=False)                i = 0            for c in command:            if i==0:                self.progress = self.progressBar_db#("Please Wait!", "Cancel", 0, 100, MainWindow)                                    self.progress.setWindowModality(Qt.WindowModal)                              self.progress.setMinimum(0)                self.progress.setMaximum(100)                self.progress.setWindowTitle("Loading, Please Wait! (Cloudflare Protection)")                                self.progress.resize(1000,100)                self.progress.show()                self.progress.setValue(0)                self.progress.setValue(100)                 self.setLayout(QVBoxLayout())                self.layout().addWidget(self.progress)                                    else:                self.image = QLabel('Backup Falied')                self.image.setAlignment(Qt.AlignCenter)                self.layout().addWidget(self.image)        def on_upload_pressed(self):        self.percorso = QFileDialog.getOpenFileName(self,                                                          'Open file', '/')        # QMessageBox.warning(self, "Messaggio", str(self.FILE), QMessageBox.Ok)    def on_restore_pressed(self):        try:            barra = QProgressBar(self)            barra.show()            barra.setMinimum(0)            barra.setMaximum(9)            for a in range(10):                time.sleep(1)                barra.setValue(a)            path = self.percorso            name_db=''            if name_db == '%s' % (self.lineEdit_dbname):                try:                    os.popen('dropdb -h %s -p %s -U %s %s'%(self.lineEdit_host, self.lineEdit_port, self.lineEdit_user, self.lineEdit_dbname))                except:                    pass            else:                os.popen('createdb -U %s -p %s -h %s -E UTF8  -T %s -e %s' %(self.lineEdit_user,self.lineEdit_port,self.lineEdit_host,self.lineEdit_template,self.lineEdit_password))                # os.popen(                    # 'pg_restore --host %s --port %s --username %s --dbname %s --role postgres --no-password  --verbose %s'                    # % str(path))                QMessageBox.warning(self, 'Message',                                    'Restore completed', QMessageBox.Ok)        except Exception as e:            QMessageBox.warning(self, 'Messaggio',                                'Restore fallied!!' + str(e),                                QMessageBox.Ok)if __name__ == '__main__':    app = QApplication(sys.argv)    ui = hff_system__dbmanagment()    ui.show()    sys.exit(app.exec_())